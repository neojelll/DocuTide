services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - user-network
    healthcheck:
      test: ["CMD", "echo", "test"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: message_broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - user-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy

  postgres:
    image: postgres:latest
    container_name: user-data
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - user-network
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: user-media
    env_file:
      - .env
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - user-network
    restart: unless-stopped

networks:
  user-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
